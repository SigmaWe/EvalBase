# -*- coding: utf-8 -*-
"""PegasusDemo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j9LyFcJLiv37zZloRudYq7Wk9YrgPbfv
"""


"""# New Section"""


from transformers import PegasusForConditionalGeneration, PegasusTokenizer
import torch
import evaluate


"""## pseudo_metric function"""

import pandas as pd
import csv
model_name = "google/pegasus-xsum"
device = "cuda" if torch.cuda.is_available() else "cpu"
tokenizer = PegasusTokenizer.from_pretrained(model_name)
model = PegasusForConditionalGeneration.from_pretrained(model_name).to(device)
pseudo_ref_sum = []

def pseudo_func(predictions,references):
 
  for system_sum, src_text  in zip (predictions, references) :
    batch = tokenizer(src_text, truncation=True, padding="longest", return_tensors="pt").to(device)
    translated = model.generate(**batch)
    tgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)
    pseudo_ref_sum.append(tgt_text[0])
    print(system_sum,tgt_text[0])
  rouge = evaluate.load('rouge')
  results =(rouge.compute(predictions= pseudo_ref_sum,
                          references= predictions,
                          use_aggregator=False))
  

  print(results)
  return results